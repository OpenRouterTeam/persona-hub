# OpenRouter Integration Plan for tencent-ailab/persona-hub

## 1. Overview
This plan outlines the steps to integrate OpenRouter as an alternative to OpenAI for synthetic data generation in the tencent-ailab/persona-hub project.

## 2. File Modifications

### 2.1 requirements.txt
Add the following dependency:
```
openrouter-client
```

### 2.2 code/openai_synthesize.py
1. Import OpenRouter client:
   ```python
   from openrouter_client import OpenRouterClient
   ```

2. Modify the `get_response` function to support both OpenAI and OpenRouter:
   ```python
   def get_response(user_prompt, api_type="openai"):
       if api_type == "openai":
           completion = client.chat.completions.create(
               model="gpt-4",
               temperature=0.7,
               messages=[
                   {"role": "system", "content": f"{system_prompt}"},
                   {"role": "user", "content": f"{user_prompt}"}
               ]
           )
           return completion.choices[0].message.content
       elif api_type == "openrouter":
           openrouter_client = OpenRouterClient(api_key=os.environ["OPENROUTER_API_KEY"])
           completion = openrouter_client.chat.completions.create(
               model="openai/gpt-4",  # Or any other model supported by OpenRouter
               temperature=0.7,
               messages=[
                   {"role": "system", "content": f"{system_prompt}"},
                   {"role": "user", "content": f"{user_prompt}"}
               ]
           )
           return completion.choices[0].message.content
       else:
           raise ValueError("Invalid API type. Choose 'openai' or 'openrouter'.")
   ```

3. Update the `main` function to include a new command-line argument for API selection:
   ```python
   parser.add_argument('--api', type=str, default='openai', choices=['openai', 'openrouter'], help='API to use for data generation (openai or openrouter)')
   ```

4. Modify the data generation loop in the `main` function:
   ```python
   for i, persona in enumerate(tqdm(personas)):
       user_prompt = prompt_template.format(persona=persona)
       response = get_response(user_prompt, api_type=args.api)
       # ... (rest of the loop remains the same)
   ```

## 3. New File: code/openrouter_client.py
Create a new file to handle OpenRouter API interactions:
```python
import os
import requests

class OpenRouterClient:
    def __init__(self, api_key=None):
        self.api_key = api_key or os.environ.get("OPENROUTER_API_KEY")
        self.base_url = "https://openrouter.ai/api/v1"
        self.chat = ChatCompletions(self)

class ChatCompletions:
    def __init__(self, client):
        self.client = client

    def create(self, model, messages, temperature=0.7):
        headers = {
            "Authorization": f"Bearer {self.client.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/tencent-ailab/persona-hub",
            "X-Title": "Persona Hub"
        }
        data = {
            "model": model,
            "messages": messages,
            "temperature": temperature
        }
        response = requests.post(f"{self.client.base_url}/chat/completions", headers=headers, json=data)
        response.raise_for_status()
        return response.json()

```

## 4. README.md Updates
Add a section explaining how to use OpenRouter:
```markdown
## Using OpenRouter

To use OpenRouter for data generation, follow these steps:

1. Sign up for an OpenRouter account and obtain an API key.
2. Set the OPENROUTER_API_KEY environment variable:
   ```
   export OPENROUTER_API_KEY=your_api_key_here
   ```
3. Run the script with the `--api openrouter` flag:
   ```
   python code/openai_synthesize.py --api openrouter --template instruction --output_path output.jsonl
   ```
```

## 5. Testing Plan
1. Test the OpenAI implementation to ensure it still works as expected.
2. Test the OpenRouter implementation with a small sample size.
3. Compare the results of both implementations to ensure consistency.
4. Test error handling for invalid API selections and missing API keys.

## 6. Pull Request Creation
1. Create a new branch: `feature/openrouter-integration`
2. Commit the changes outlined above.
3. Push the branch to the repository.
4. Create a pull request using the GitHub CLI:
   ```
   gh pr create --title "Integrate OpenRouter API" --body "This PR adds support for using OpenRouter as an alternative to OpenAI for synthetic data generation."
   ```

## 7. Next Steps
1. Implement the changes outlined in this plan.
2. Test the implementation thoroughly.
3. Create the pull request and submit for review.
